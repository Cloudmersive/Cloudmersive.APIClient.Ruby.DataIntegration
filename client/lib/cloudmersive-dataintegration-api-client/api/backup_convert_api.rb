=begin
#Data Integration API

#Easily and directly query database backup files, convert into other file formats.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module CloudmersiveDataintegrationApiClient
  class BackupConvertApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Lists all tables stored in a SQL Server Backup (.BAK) file
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input_file Input file to perform the operation on
    # @return [MssqlBakEnumerateTablesResult]
    def dataintegration_backup_convert_mssql_bak_get_tables_post(opts = {})
      data, _status_code, _headers = dataintegration_backup_convert_mssql_bak_get_tables_post_with_http_info(opts)
      data
    end

    # Lists all tables stored in a SQL Server Backup (.BAK) file
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input_file Input file to perform the operation on
    # @return [Array<(MssqlBakEnumerateTablesResult, Fixnum, Hash)>] MssqlBakEnumerateTablesResult data, response status code and response headers
    def dataintegration_backup_convert_mssql_bak_get_tables_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackupConvertApi.dataintegration_backup_convert_mssql_bak_get_tables_post ...'
      end
      # resource path
      local_var_path = '/dataintegration/backup/convert/mssql/bak/get/tables'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputFile'] = opts[:'input_file'] if !opts[:'input_file'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MssqlBakEnumerateTablesResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackupConvertApi#dataintegration_backup_convert_mssql_bak_get_tables_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Converts a SQL Server Backup (.BAK) file into CSV for a specified table
    # Input the target table to extract the data as a CSV format file.  Supports a wide array of SQL Server .BAK files and SQL Server backup file versions.  Consumes 1 API call per MB of input data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :table_name Name of the table to return
    # @option opts [File] :input_file Input file to perform the operation on
    # @return [String]
    def dataintegration_backup_convert_mssql_bak_to_csv_post(opts = {})
      data, _status_code, _headers = dataintegration_backup_convert_mssql_bak_to_csv_post_with_http_info(opts)
      data
    end

    # Converts a SQL Server Backup (.BAK) file into CSV for a specified table
    # Input the target table to extract the data as a CSV format file.  Supports a wide array of SQL Server .BAK files and SQL Server backup file versions.  Consumes 1 API call per MB of input data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :table_name Name of the table to return
    # @option opts [File] :input_file Input file to perform the operation on
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def dataintegration_backup_convert_mssql_bak_to_csv_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackupConvertApi.dataintegration_backup_convert_mssql_bak_to_csv_post ...'
      end
      # resource path
      local_var_path = '/dataintegration/backup/convert/mssql/bak/to/csv'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'tableName'] = opts[:'table_name'] if !opts[:'table_name'].nil?

      # form parameters
      form_params = {}
      form_params['inputFile'] = opts[:'input_file'] if !opts[:'input_file'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackupConvertApi#dataintegration_backup_convert_mssql_bak_to_csv_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
